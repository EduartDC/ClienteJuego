//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteJuego.ConnectService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.PlayerServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.FriendServer[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.FriendServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.MessageServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.MatchServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.AnswerServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.QuestionServer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteJuego.ConnectService.AnswerServer[]))]
    public partial class PlayerServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object chatCallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteJuego.ConnectService.FriendServer[] friendsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object gameCallbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object matchCallBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object userCallBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object chatCallback {
            get {
                return this.chatCallbackField;
            }
            set {
                if ((object.ReferenceEquals(this.chatCallbackField, value) != true)) {
                    this.chatCallbackField = value;
                    this.RaisePropertyChanged("chatCallback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteJuego.ConnectService.FriendServer[] friends {
            get {
                return this.friendsField;
            }
            set {
                if ((object.ReferenceEquals(this.friendsField, value) != true)) {
                    this.friendsField = value;
                    this.RaisePropertyChanged("friends");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object gameCallback {
            get {
                return this.gameCallbackField;
            }
            set {
                if ((object.ReferenceEquals(this.gameCallbackField, value) != true)) {
                    this.gameCallbackField = value;
                    this.RaisePropertyChanged("gameCallback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idPlayer {
            get {
                return this.idPlayerField;
            }
            set {
                if ((this.idPlayerField.Equals(value) != true)) {
                    this.idPlayerField = value;
                    this.RaisePropertyChanged("idPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object matchCallBack {
            get {
                return this.matchCallBackField;
            }
            set {
                if ((object.ReferenceEquals(this.matchCallBackField, value) != true)) {
                    this.matchCallBackField = value;
                    this.RaisePropertyChanged("matchCallBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object userCallBack {
            get {
                return this.userCallBackField;
            }
            set {
                if ((object.ReferenceEquals(this.userCallBackField, value) != true)) {
                    this.userCallBackField = value;
                    this.RaisePropertyChanged("userCallBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    public partial class FriendServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime creationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int gameFriendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idFriendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ownerPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime creationDate {
            get {
                return this.creationDateField;
            }
            set {
                if ((this.creationDateField.Equals(value) != true)) {
                    this.creationDateField = value;
                    this.RaisePropertyChanged("creationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int gameFriend {
            get {
                return this.gameFriendField;
            }
            set {
                if ((this.gameFriendField.Equals(value) != true)) {
                    this.gameFriendField = value;
                    this.RaisePropertyChanged("gameFriend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idFriend {
            get {
                return this.idFriendField;
            }
            set {
                if ((this.idFriendField.Equals(value) != true)) {
                    this.idFriendField = value;
                    this.RaisePropertyChanged("idFriend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ownerPlayer {
            get {
                return this.ownerPlayerField;
            }
            set {
                if ((this.ownerPlayerField.Equals(value) != true)) {
                    this.ownerPlayerField = value;
                    this.RaisePropertyChanged("ownerPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    public partial class MessageServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    public partial class MatchServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string inviteCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerWinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteJuego.ConnectService.PlayerServer[] playersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scorePlayerOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scorePlayerTwoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idMatch {
            get {
                return this.idMatchField;
            }
            set {
                if ((this.idMatchField.Equals(value) != true)) {
                    this.idMatchField = value;
                    this.RaisePropertyChanged("idMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string inviteCode {
            get {
                return this.inviteCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.inviteCodeField, value) != true)) {
                    this.inviteCodeField = value;
                    this.RaisePropertyChanged("inviteCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerWinner {
            get {
                return this.playerWinnerField;
            }
            set {
                if ((this.playerWinnerField.Equals(value) != true)) {
                    this.playerWinnerField = value;
                    this.RaisePropertyChanged("playerWinner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteJuego.ConnectService.PlayerServer[] players {
            get {
                return this.playersField;
            }
            set {
                if ((object.ReferenceEquals(this.playersField, value) != true)) {
                    this.playersField = value;
                    this.RaisePropertyChanged("players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int scorePlayerOne {
            get {
                return this.scorePlayerOneField;
            }
            set {
                if ((this.scorePlayerOneField.Equals(value) != true)) {
                    this.scorePlayerOneField = value;
                    this.RaisePropertyChanged("scorePlayerOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int scorePlayerTwo {
            get {
                return this.scorePlayerTwoField;
            }
            set {
                if ((this.scorePlayerTwoField.Equals(value) != true)) {
                    this.scorePlayerTwoField = value;
                    this.RaisePropertyChanged("scorePlayerTwo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnswerServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    public partial class AnswerServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string answerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int placeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string answer {
            get {
                return this.answerField;
            }
            set {
                if ((object.ReferenceEquals(this.answerField, value) != true)) {
                    this.answerField = value;
                    this.RaisePropertyChanged("answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idAnswer {
            get {
                return this.idAnswerField;
            }
            set {
                if ((this.idAnswerField.Equals(value) != true)) {
                    this.idAnswerField = value;
                    this.RaisePropertyChanged("idAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int place {
            get {
                return this.placeField;
            }
            set {
                if ((this.placeField.Equals(value) != true)) {
                    this.placeField = value;
                    this.RaisePropertyChanged("place");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int score {
            get {
                return this.scoreField;
            }
            set {
                if ((this.scoreField.Equals(value) != true)) {
                    this.scoreField = value;
                    this.RaisePropertyChanged("score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionServer", Namespace="http://schemas.datacontract.org/2004/07/MessageService.Domain")]
    [System.SerializableAttribute()]
    public partial class QuestionServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteJuego.ConnectService.AnswerServer[] answersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idQuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string questionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string questionClassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteJuego.ConnectService.AnswerServer[] answers {
            get {
                return this.answersField;
            }
            set {
                if ((object.ReferenceEquals(this.answersField, value) != true)) {
                    this.answersField = value;
                    this.RaisePropertyChanged("answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idQuestion {
            get {
                return this.idQuestionField;
            }
            set {
                if ((this.idQuestionField.Equals(value) != true)) {
                    this.idQuestionField = value;
                    this.RaisePropertyChanged("idQuestion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string question {
            get {
                return this.questionField;
            }
            set {
                if ((object.ReferenceEquals(this.questionField, value) != true)) {
                    this.questionField = value;
                    this.RaisePropertyChanged("question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string questionClass {
            get {
                return this.questionClassField;
            }
            set {
                if ((object.ReferenceEquals(this.questionClassField, value) != true)) {
                    this.questionClassField = value;
                    this.RaisePropertyChanged("questionClass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectService.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/MatchingFriends", ReplyAction="http://tempuri.org/IUserManager/MatchingFriendsResponse")]
        ClienteJuego.ConnectService.PlayerServer[] MatchingFriends(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/MatchingFriends", ReplyAction="http://tempuri.org/IUserManager/MatchingFriendsResponse")]
        System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer[]> MatchingFriendsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddFriend", ReplyAction="http://tempuri.org/IUserManager/AddFriendResponse")]
        int AddFriend(ClienteJuego.ConnectService.FriendServer newFriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddFriend", ReplyAction="http://tempuri.org/IUserManager/AddFriendResponse")]
        System.Threading.Tasks.Task<int> AddFriendAsync(ClienteJuego.ConnectService.FriendServer newFriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddPlayer", ReplyAction="http://tempuri.org/IUserManager/AddPlayerResponse")]
        int AddPlayer(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddPlayer", ReplyAction="http://tempuri.org/IUserManager/AddPlayerResponse")]
        System.Threading.Tasks.Task<int> AddPlayerAsync(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UserConnect", ReplyAction="http://tempuri.org/IUserManager/UserConnectResponse")]
        ClienteJuego.ConnectService.PlayerServer UserConnect(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UserConnect", ReplyAction="http://tempuri.org/IUserManager/UserConnectResponse")]
        System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> UserConnectAsync(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateEmailPlayer", ReplyAction="http://tempuri.org/IUserManager/ValidateEmailPlayerResponse")]
        int ValidateEmailPlayer(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateEmailPlayer", ReplyAction="http://tempuri.org/IUserManager/ValidateEmailPlayerResponse")]
        System.Threading.Tasks.Task<int> ValidateEmailPlayerAsync(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateUserNamePlayer", ReplyAction="http://tempuri.org/IUserManager/ValidateUserNamePlayerResponse")]
        int ValidateUserNamePlayer(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateUserNamePlayer", ReplyAction="http://tempuri.org/IUserManager/ValidateUserNamePlayerResponse")]
        System.Threading.Tasks.Task<int> ValidateUserNamePlayerAsync(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlayer", ReplyAction="http://tempuri.org/IUserManager/UpdatePlayerResponse")]
        int UpdatePlayer(ClienteJuego.ConnectService.PlayerServer newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlayer", ReplyAction="http://tempuri.org/IUserManager/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<int> UpdatePlayerAsync(ClienteJuego.ConnectService.PlayerServer newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SearchPlayer", ReplyAction="http://tempuri.org/IUserManager/SearchPlayerResponse")]
        ClienteJuego.ConnectService.PlayerServer SearchPlayer(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SearchPlayer", ReplyAction="http://tempuri.org/IUserManager/SearchPlayerResponse")]
        System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> SearchPlayerAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/DeleteFriend", ReplyAction="http://tempuri.org/IUserManager/DeleteFriendResponse")]
        int DeleteFriend(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/DeleteFriend", ReplyAction="http://tempuri.org/IUserManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendAsync(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UserDisconect", ReplyAction="http://tempuri.org/IUserManager/UserDisconectResponse")]
        void UserDisconect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UserDisconect", ReplyAction="http://tempuri.org/IUserManager/UserDisconectResponse")]
        System.Threading.Tasks.Task UserDisconectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateLobby", ReplyAction="http://tempuri.org/IUserManager/ValidateLobbyResponse")]
        int ValidateLobby(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateLobby", ReplyAction="http://tempuri.org/IUserManager/ValidateLobbyResponse")]
        System.Threading.Tasks.Task<int> ValidateLobbyAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GuestUser", ReplyAction="http://tempuri.org/IUserManager/GuestUserResponse")]
        ClienteJuego.ConnectService.PlayerServer GuestUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GuestUser", ReplyAction="http://tempuri.org/IUserManager/GuestUserResponse")]
        System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> GuestUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SendMail", ReplyAction="http://tempuri.org/IUserManager/SendMailResponse")]
        int SendMail(ClienteJuego.ConnectService.PlayerServer player, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SendMail", ReplyAction="http://tempuri.org/IUserManager/SendMailResponse")]
        System.Threading.Tasks.Task<int> SendMailAsync(ClienteJuego.ConnectService.PlayerServer player, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : ClienteJuego.ConnectService.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<ClienteJuego.ConnectService.IUserManager>, ClienteJuego.ConnectService.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClienteJuego.ConnectService.PlayerServer[] MatchingFriends(string username) {
            return base.Channel.MatchingFriends(username);
        }
        
        public System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer[]> MatchingFriendsAsync(string username) {
            return base.Channel.MatchingFriendsAsync(username);
        }
        
        public int AddFriend(ClienteJuego.ConnectService.FriendServer newFriend) {
            return base.Channel.AddFriend(newFriend);
        }
        
        public System.Threading.Tasks.Task<int> AddFriendAsync(ClienteJuego.ConnectService.FriendServer newFriend) {
            return base.Channel.AddFriendAsync(newFriend);
        }
        
        public int AddPlayer(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.AddPlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> AddPlayerAsync(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.AddPlayerAsync(player);
        }
        
        public ClienteJuego.ConnectService.PlayerServer UserConnect(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.UserConnect(player);
        }
        
        public System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> UserConnectAsync(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.UserConnectAsync(player);
        }
        
        public int ValidateEmailPlayer(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.ValidateEmailPlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> ValidateEmailPlayerAsync(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.ValidateEmailPlayerAsync(player);
        }
        
        public int ValidateUserNamePlayer(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.ValidateUserNamePlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> ValidateUserNamePlayerAsync(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.ValidateUserNamePlayerAsync(player);
        }
        
        public int UpdatePlayer(ClienteJuego.ConnectService.PlayerServer newPlayer) {
            return base.Channel.UpdatePlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlayerAsync(ClienteJuego.ConnectService.PlayerServer newPlayer) {
            return base.Channel.UpdatePlayerAsync(newPlayer);
        }
        
        public ClienteJuego.ConnectService.PlayerServer SearchPlayer(string userName) {
            return base.Channel.SearchPlayer(userName);
        }
        
        public System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> SearchPlayerAsync(string userName) {
            return base.Channel.SearchPlayerAsync(userName);
        }
        
        public int DeleteFriend(int idPlayer, string username) {
            return base.Channel.DeleteFriend(idPlayer, username);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendAsync(int idPlayer, string username) {
            return base.Channel.DeleteFriendAsync(idPlayer, username);
        }
        
        public void UserDisconect(string username) {
            base.Channel.UserDisconect(username);
        }
        
        public System.Threading.Tasks.Task UserDisconectAsync(string username) {
            return base.Channel.UserDisconectAsync(username);
        }
        
        public int ValidateLobby(string code) {
            return base.Channel.ValidateLobby(code);
        }
        
        public System.Threading.Tasks.Task<int> ValidateLobbyAsync(string code) {
            return base.Channel.ValidateLobbyAsync(code);
        }
        
        public ClienteJuego.ConnectService.PlayerServer GuestUser() {
            return base.Channel.GuestUser();
        }
        
        public System.Threading.Tasks.Task<ClienteJuego.ConnectService.PlayerServer> GuestUserAsync() {
            return base.Channel.GuestUserAsync();
        }
        
        public int SendMail(ClienteJuego.ConnectService.PlayerServer player, string code) {
            return base.Channel.SendMail(player, code);
        }
        
        public System.Threading.Tasks.Task<int> SendMailAsync(ClienteJuego.ConnectService.PlayerServer player, string code) {
            return base.Channel.SendMailAsync(player, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectService.IChatService", CallbackContract=typeof(ClienteJuego.ConnectService.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Connect")]
        void Connect(ClienteJuego.ConnectService.PlayerServer player, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Connect")]
        System.Threading.Tasks.Task ConnectAsync(ClienteJuego.ConnectService.PlayerServer player, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        void Say(ClienteJuego.ConnectService.MessageServer message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        System.Threading.Tasks.Task SayAsync(ClienteJuego.ConnectService.MessageServer message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        void Whisper(ClienteJuego.ConnectService.MessageServer message, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(ClienteJuego.ConnectService.MessageServer message, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Disconnect")]
        void Disconnect(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(ClienteJuego.ConnectService.PlayerServer player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RefreshClients")]
        void RefreshClients(ClienteJuego.ConnectService.PlayerServer[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Receive")]
        void Receive(ClienteJuego.ConnectService.MessageServer message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveWhisper")]
        void ReceiveWhisper(ClienteJuego.ConnectService.MessageServer message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserJoin")]
        void UserJoin(ClienteJuego.ConnectService.PlayerServer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserLeave")]
        void UserLeave(ClienteJuego.ConnectService.PlayerServer player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ClienteJuego.ConnectService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ClienteJuego.ConnectService.IChatService>, ClienteJuego.ConnectService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(ClienteJuego.ConnectService.PlayerServer player, string code) {
            base.Channel.Connect(player, code);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(ClienteJuego.ConnectService.PlayerServer player, string code) {
            return base.Channel.ConnectAsync(player, code);
        }
        
        public void Say(ClienteJuego.ConnectService.MessageServer message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(ClienteJuego.ConnectService.MessageServer message) {
            return base.Channel.SayAsync(message);
        }
        
        public void Whisper(ClienteJuego.ConnectService.MessageServer message, string player) {
            base.Channel.Whisper(message, player);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(ClienteJuego.ConnectService.MessageServer message, string player) {
            return base.Channel.WhisperAsync(message, player);
        }
        
        public void Disconnect(ClienteJuego.ConnectService.PlayerServer player) {
            base.Channel.Disconnect(player);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(ClienteJuego.ConnectService.PlayerServer player) {
            return base.Channel.DisconnectAsync(player);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectService.IMatchService", CallbackContract=typeof(ClienteJuego.ConnectService.IMatchServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMatchService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/StartLobby")]
        void StartLobby(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/StartLobby")]
        System.Threading.Tasks.Task StartLobbyAsync(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/AddToLobby")]
        void AddToLobby(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/AddToLobby")]
        System.Threading.Tasks.Task AddToLobbyAsync(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/StartMatch")]
        void StartMatch(string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/StartMatch")]
        System.Threading.Tasks.Task StartMatchAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/DisconnectFromLobby")]
        void DisconnectFromLobby(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/DisconnectFromLobby")]
        System.Threading.Tasks.Task DisconnectFromLobbyAsync(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/KickFromLobby")]
        void KickFromLobby(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/KickFromLobby")]
        System.Threading.Tasks.Task KickFromLobbyAsync(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/SetCallbackMatch")]
        void SetCallbackMatch(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/SetCallbackMatch")]
        System.Threading.Tasks.Task SetCallbackMatchAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/UpdateLobby")]
        void UpdateLobby(ClienteJuego.ConnectService.PlayerServer[] plyers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/LoadMatch")]
        void LoadMatch(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchService/Kicked")]
        void Kicked();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchServiceChannel : ClienteJuego.ConnectService.IMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchServiceClient : System.ServiceModel.DuplexClientBase<ClienteJuego.ConnectService.IMatchService>, ClienteJuego.ConnectService.IMatchService {
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartLobby(string username, string code) {
            base.Channel.StartLobby(username, code);
        }
        
        public System.Threading.Tasks.Task StartLobbyAsync(string username, string code) {
            return base.Channel.StartLobbyAsync(username, code);
        }
        
        public void AddToLobby(string username, string code) {
            base.Channel.AddToLobby(username, code);
        }
        
        public System.Threading.Tasks.Task AddToLobbyAsync(string username, string code) {
            return base.Channel.AddToLobbyAsync(username, code);
        }
        
        public void StartMatch(string code) {
            base.Channel.StartMatch(code);
        }
        
        public System.Threading.Tasks.Task StartMatchAsync(string code) {
            return base.Channel.StartMatchAsync(code);
        }
        
        public void DisconnectFromLobby(string username, string code) {
            base.Channel.DisconnectFromLobby(username, code);
        }
        
        public System.Threading.Tasks.Task DisconnectFromLobbyAsync(string username, string code) {
            return base.Channel.DisconnectFromLobbyAsync(username, code);
        }
        
        public void KickFromLobby(string username, string code) {
            base.Channel.KickFromLobby(username, code);
        }
        
        public System.Threading.Tasks.Task KickFromLobbyAsync(string username, string code) {
            return base.Channel.KickFromLobbyAsync(username, code);
        }
        
        public void SetCallbackMatch(string username) {
            base.Channel.SetCallbackMatch(username);
        }
        
        public System.Threading.Tasks.Task SetCallbackMatchAsync(string username) {
            return base.Channel.SetCallbackMatchAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectService.INotificationService", CallbackContract=typeof(ClienteJuego.ConnectService.INotificationServiceCallback))]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SetCallBack", ReplyAction="http://tempuri.org/INotificationService/SetCallBackResponse")]
        void SetCallBack(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SetCallBack", ReplyAction="http://tempuri.org/INotificationService/SetCallBackResponse")]
        System.Threading.Tasks.Task SetCallBackAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/NotificationUsers", ReplyAction="http://tempuri.org/INotificationService/NotificationUsersResponse")]
        void NotificationUsers(string name, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/NotificationUsers", ReplyAction="http://tempuri.org/INotificationService/NotificationUsersResponse")]
        System.Threading.Tasks.Task NotificationUsersAsync(string name, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/Notification")]
        void Notification(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/LoadLobby")]
        void LoadLobby(ClienteJuego.ConnectService.PlayerServer[] players, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : ClienteJuego.ConnectService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.DuplexClientBase<ClienteJuego.ConnectService.INotificationService>, ClienteJuego.ConnectService.INotificationService {
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SetCallBack(string username) {
            base.Channel.SetCallBack(username);
        }
        
        public System.Threading.Tasks.Task SetCallBackAsync(string username) {
            return base.Channel.SetCallBackAsync(username);
        }
        
        public void NotificationUsers(string name, string code) {
            base.Channel.NotificationUsers(name, code);
        }
        
        public System.Threading.Tasks.Task NotificationUsersAsync(string name, string code) {
            return base.Channel.NotificationUsersAsync(name, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConnectService.IGameService", CallbackContract=typeof(ClienteJuego.ConnectService.IGameServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/StartRound")]
        void StartRound(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/StartRound")]
        System.Threading.Tasks.Task StartRoundAsync(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetCallbackGame")]
        void SetCallbackGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetCallbackGame")]
        System.Threading.Tasks.Task SetCallbackGameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/YouTurn")]
        void YouTurn(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/YouTurn")]
        System.Threading.Tasks.Task YouTurnAsync(string username, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetBoard")]
        void SetBoard(ClienteJuego.ConnectService.MatchServer matchServer, ClienteJuego.ConnectService.AnswerServer answerServer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetBoard")]
        System.Threading.Tasks.Task SetBoardAsync(ClienteJuego.ConnectService.MatchServer matchServer, ClienteJuego.ConnectService.AnswerServer answerServer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/EndMatch")]
        void EndMatch(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/EndMatch")]
        System.Threading.Tasks.Task EndMatchAsync(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/AddStrikes")]
        void AddStrikes(int strikesOne, int strikesTwo, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/AddStrikes")]
        System.Threading.Tasks.Task AddStrikesAsync(int strikesOne, int strikesTwo, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetRound")]
        void SetRound(ClienteJuego.ConnectService.QuestionServer question, ClienteJuego.ConnectService.AnswerServer[] answers, ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateMatch")]
        void UpdateMatch(ClienteJuego.ConnectService.MatchServer match, ClienteJuego.ConnectService.AnswerServer answerServer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetTurn")]
        void SetTurn(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/EndTurn")]
        void EndTurn(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ExitMatch")]
        void ExitMatch(ClienteJuego.ConnectService.MatchServer match);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SetStrikes")]
        void SetStrikes(int stikesOne, int strikesTwo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : ClienteJuego.ConnectService.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<ClienteJuego.ConnectService.IGameService>, ClienteJuego.ConnectService.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartRound(ClienteJuego.ConnectService.MatchServer match) {
            base.Channel.StartRound(match);
        }
        
        public System.Threading.Tasks.Task StartRoundAsync(ClienteJuego.ConnectService.MatchServer match) {
            return base.Channel.StartRoundAsync(match);
        }
        
        public void SetCallbackGame(string username) {
            base.Channel.SetCallbackGame(username);
        }
        
        public System.Threading.Tasks.Task SetCallbackGameAsync(string username) {
            return base.Channel.SetCallbackGameAsync(username);
        }
        
        public void YouTurn(string username, string code) {
            base.Channel.YouTurn(username, code);
        }
        
        public System.Threading.Tasks.Task YouTurnAsync(string username, string code) {
            return base.Channel.YouTurnAsync(username, code);
        }
        
        public void SetBoard(ClienteJuego.ConnectService.MatchServer matchServer, ClienteJuego.ConnectService.AnswerServer answerServer) {
            base.Channel.SetBoard(matchServer, answerServer);
        }
        
        public System.Threading.Tasks.Task SetBoardAsync(ClienteJuego.ConnectService.MatchServer matchServer, ClienteJuego.ConnectService.AnswerServer answerServer) {
            return base.Channel.SetBoardAsync(matchServer, answerServer);
        }
        
        public void EndMatch(ClienteJuego.ConnectService.MatchServer match) {
            base.Channel.EndMatch(match);
        }
        
        public System.Threading.Tasks.Task EndMatchAsync(ClienteJuego.ConnectService.MatchServer match) {
            return base.Channel.EndMatchAsync(match);
        }
        
        public void AddStrikes(int strikesOne, int strikesTwo, string code) {
            base.Channel.AddStrikes(strikesOne, strikesTwo, code);
        }
        
        public System.Threading.Tasks.Task AddStrikesAsync(int strikesOne, int strikesTwo, string code) {
            return base.Channel.AddStrikesAsync(strikesOne, strikesTwo, code);
        }
    }
}
